/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package ria.intellij;

import com.intellij.lexer.FlexLexer;
import com.intellij.lexer.LexerBase;
import com.intellij.psi.tree.IElementType;
import ria.intellij.psi.RiaTypes;
import com.intellij.psi.TokenType;
import java.util.ArrayList;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Ria.flex</tt>
 */
class RiaLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int ML_COMMENT = 2;
  public static final int DQ_STRING = 4;
  public static final int SQ_STRING = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [9, 6, 6]
   * Total runtime size is 1568 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>12]|((ch>>6)&0x3f)]<<6)|(ch&0x3f)];
  }

  /* The ZZ_CMAP_Z table has 272 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\100\1\200\u010d\100");

  /* The ZZ_CMAP_Y table has 192 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\175\3\1\4\77\3");

  /* The ZZ_CMAP_A table has 320 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\3\1\2\2\1\1\2\22\0\1\3\1\0\1\52\1\45\1\47\2\0\1\6\1\60\1\61\1\46\1"+
    "\45\1\37\1\45\1\40\1\4\12\50\1\41\1\37\1\0\1\42\1\44\2\0\4\5\1\51\11\5\1\34"+
    "\13\5\1\56\1\54\1\57\1\0\1\13\1\0\1\7\1\12\1\25\1\11\1\26\1\27\1\33\1\22\1"+
    "\16\2\5\1\23\1\30\1\10\1\14\1\32\1\5\1\15\1\21\1\20\1\31\1\17\1\36\1\24\1"+
    "\35\1\5\1\53\1\43\1\55\7\0\1\1\242\0\2\1\26\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\2\1\1\2\1\3\1\4\23\3\2\5\1\1"+
    "\1\2\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\16\1\20\2\16\1\20\1\21"+
    "\1\22\1\3\1\23\2\3\1\23\2\3\1\23\22\3"+
    "\2\6\1\24\1\25\2\0\1\21\1\26\1\27\22\3"+
    "\1\30\1\0\12\3\1\23\10\3";

  private static int [] zzUnpackAction() {
    int [] result = new int[123];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\62\0\144\0\226\0\310\0\372\0\u012c\0\u015e"+
    "\0\310\0\u0190\0\u01c2\0\u01f4\0\u0226\0\u0258\0\u028a\0\u02bc"+
    "\0\u02ee\0\u0320\0\u0352\0\u0384\0\u03b6\0\u03e8\0\u041a\0\u044c"+
    "\0\u047e\0\u04b0\0\u04e2\0\u0514\0\310\0\u0546\0\u0578\0\310"+
    "\0\u05aa\0\310\0\310\0\310\0\310\0\310\0\310\0\310"+
    "\0\310\0\u05dc\0\u060e\0\310\0\u0640\0\u0672\0\u06a4\0\u06d6"+
    "\0\u0708\0\u073a\0\u015e\0\u076c\0\u079e\0\u07d0\0\u0802\0\u0834"+
    "\0\u0866\0\u0898\0\u08ca\0\u08fc\0\u092e\0\u0960\0\u0992\0\u09c4"+
    "\0\u09f6\0\u0a28\0\u0a5a\0\u0a8c\0\u0abe\0\u0af0\0\u0b22\0\u0b54"+
    "\0\u0b86\0\u0bb8\0\u0bea\0\u0c1c\0\u0c4e\0\310\0\310\0\u0c80"+
    "\0\u06a4\0\u0cb2\0\u0ce4\0\310\0\u0d16\0\u0d48\0\u0d7a\0\u0dac"+
    "\0\u0dde\0\u0e10\0\u0e42\0\u0e74\0\u0ea6\0\u0ed8\0\u0f0a\0\u0f3c"+
    "\0\u0f6e\0\u0fa0\0\u0fd2\0\u1004\0\u1036\0\u1068\0\u109a\0\u10cc"+
    "\0\u10fe\0\u1130\0\u1162\0\u1194\0\u11c6\0\u11f8\0\u122a\0\u125c"+
    "\0\u128e\0\u12c0\0\u12f2\0\u1324\0\u1356\0\u1388\0\u13ba\0\u13ec"+
    "\0\u141e\0\u1450\0\u1482";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[123];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\3\6\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\10\1\16\1\10\1\17\1\20\1\21\1\22"+
    "\1\10\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\2\10\1\34\2\35\1\36\1\35\1\37"+
    "\1\5\3\40\1\41\1\10\1\42\1\43\1\5\1\44"+
    "\1\45\1\46\1\47\1\50\46\51\1\52\62\51\1\53"+
    "\2\51\1\54\1\51\1\55\5\51\6\56\1\57\53\56"+
    "\63\0\3\6\62\0\1\60\41\0\1\61\20\0\32\10"+
    "\11\0\2\10\15\0\3\10\1\62\10\10\1\63\15\10"+
    "\11\0\2\10\15\0\7\10\1\64\11\10\1\65\10\10"+
    "\11\0\2\10\15\0\7\10\1\66\1\10\1\67\20\10"+
    "\11\0\2\10\15\0\6\10\1\70\23\10\11\0\2\10"+
    "\15\0\10\10\1\63\11\10\1\63\7\10\11\0\2\10"+
    "\15\0\3\10\1\71\10\10\1\63\5\10\1\63\1\72"+
    "\6\10\11\0\2\10\15\0\2\10\1\73\27\10\11\0"+
    "\2\10\15\0\10\10\1\74\4\10\1\75\12\10\1\76"+
    "\1\10\11\0\2\10\15\0\15\10\1\77\3\10\1\64"+
    "\10\10\11\0\2\10\15\0\2\10\1\100\4\10\1\101"+
    "\11\10\1\64\10\10\11\0\2\10\15\0\7\10\1\73"+
    "\22\10\11\0\2\10\15\0\2\10\1\102\13\10\1\103"+
    "\13\10\11\0\2\10\15\0\3\10\1\62\12\10\1\104"+
    "\1\105\12\10\11\0\2\10\15\0\2\10\1\106\4\10"+
    "\1\73\1\10\1\107\20\10\11\0\2\10\15\0\7\10"+
    "\1\110\22\10\11\0\2\10\15\0\3\10\1\111\26\10"+
    "\11\0\2\10\15\0\10\10\1\112\21\10\11\0\2\10"+
    "\15\0\21\10\1\64\10\10\11\0\2\10\15\0\11\10"+
    "\1\113\20\10\11\0\2\10\52\0\1\40\63\0\1\40"+
    "\43\0\1\114\11\0\1\115\7\0\1\41\1\114\10\0"+
    "\4\51\1\116\55\51\53\0\1\117\10\0\1\120\47\0"+
    "\1\51\7\0\6\56\1\121\53\56\6\0\1\56\53\0"+
    "\2\122\1\0\1\122\1\123\55\122\46\0\1\124\20\0"+
    "\4\10\1\63\25\10\11\0\2\10\15\0\13\10\1\63"+
    "\16\10\11\0\2\10\15\0\31\10\1\63\11\0\2\10"+
    "\15\0\3\10\1\125\26\10\11\0\2\10\15\0\12\10"+
    "\1\63\17\10\11\0\2\10\15\0\2\10\1\126\4\10"+
    "\1\73\22\10\11\0\2\10\15\0\14\10\1\127\15\10"+
    "\11\0\2\10\15\0\25\10\1\130\4\10\11\0\2\10"+
    "\15\0\10\10\1\63\21\10\11\0\2\10\15\0\30\10"+
    "\1\63\1\10\11\0\2\10\15\0\21\10\1\131\10\10"+
    "\11\0\2\10\15\0\25\10\1\132\4\10\11\0\2\10"+
    "\15\0\10\10\1\63\5\10\1\63\13\10\11\0\2\10"+
    "\15\0\13\10\1\133\16\10\11\0\2\10\15\0\2\10"+
    "\1\62\4\10\1\134\22\10\11\0\2\10\15\0\13\10"+
    "\1\133\1\135\15\10\11\0\2\10\15\0\2\10\1\136"+
    "\27\10\11\0\2\10\15\0\11\10\1\137\2\10\1\125"+
    "\15\10\11\0\2\10\15\0\13\10\1\140\16\10\11\0"+
    "\2\10\15\0\16\10\1\141\13\10\11\0\2\10\15\0"+
    "\3\10\1\142\26\10\11\0\2\10\15\0\4\10\1\143"+
    "\25\10\11\0\2\10\15\0\5\10\1\144\24\10\11\0"+
    "\2\10\15\0\7\10\1\145\22\10\11\0\2\10\15\0"+
    "\13\10\1\146\16\10\11\0\2\10\50\0\1\147\7\0"+
    "\1\114\37\0\1\114\21\0\1\115\1\114\12\0\1\120"+
    "\1\150\56\0\2\122\1\0\57\122\2\123\1\0\57\123"+
    "\5\0\21\10\1\63\10\10\11\0\2\10\15\0\3\10"+
    "\1\62\26\10\11\0\2\10\15\0\13\10\1\151\16\10"+
    "\11\0\2\10\15\0\7\10\1\152\22\10\11\0\2\10"+
    "\15\0\3\10\1\63\26\10\11\0\2\10\15\0\21\10"+
    "\1\153\10\10\11\0\2\10\15\0\20\10\1\146\11\10"+
    "\11\0\2\10\15\0\25\10\1\63\4\10\11\0\2\10"+
    "\15\0\13\10\1\63\5\10\1\63\10\10\11\0\2\10"+
    "\15\0\14\10\1\154\15\10\11\0\2\10\15\0\22\10"+
    "\1\63\7\10\11\0\2\10\15\0\21\10\1\155\10\10"+
    "\11\0\2\10\15\0\16\10\1\63\13\10\11\0\2\10"+
    "\15\0\2\10\1\156\27\10\11\0\2\10\15\0\24\10"+
    "\1\157\5\10\11\0\2\10\15\0\11\10\1\126\20\10"+
    "\11\0\2\10\15\0\26\10\1\160\3\10\11\0\2\10"+
    "\15\0\15\10\1\63\14\10\11\0\2\10\60\0\1\147"+
    "\14\0\1\150\46\0\1\51\14\0\2\10\1\161\27\10"+
    "\11\0\2\10\15\0\10\10\1\64\21\10\11\0\2\10"+
    "\15\0\4\10\1\162\25\10\11\0\2\10\15\0\14\10"+
    "\1\163\15\10\11\0\2\10\15\0\3\10\1\164\26\10"+
    "\11\0\2\10\15\0\16\10\1\165\13\10\11\0\2\10"+
    "\15\0\16\10\1\125\13\10\11\0\2\10\15\0\10\10"+
    "\1\166\21\10\11\0\2\10\15\0\3\10\1\167\26\10"+
    "\11\0\2\10\15\0\21\10\1\137\10\10\11\0\2\10"+
    "\15\0\27\10\1\137\2\10\11\0\2\10\15\0\4\10"+
    "\1\170\25\10\11\0\2\10\15\0\16\10\1\74\13\10"+
    "\11\0\2\10\15\0\2\10\1\171\27\10\11\0\2\10"+
    "\15\0\20\10\1\172\11\10\11\0\2\10\15\0\14\10"+
    "\1\63\15\10\11\0\2\10\15\0\23\10\1\63\6\10"+
    "\11\0\2\10\15\0\21\10\1\173\10\10\11\0\2\10"+
    "\15\0\7\10\1\137\22\10\11\0\2\10\10\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5300];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\11\3\1\1\11\23\1\1\11\2\1\1\11"+
    "\1\1\10\11\2\1\1\11\41\1\2\11\2\0\2\1"+
    "\1\11\23\1\1\0\23\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[123];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    boolean docComment = false;
    int inString = 0;
    ArrayList<Integer> braceCount = new ArrayList<>();

    public int getState() {
       return yystate() + inString;
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  RiaLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        switch (zzLexicalState) {
            case ML_COMMENT: {
              yybegin(YYINITIAL); return TokenType.BAD_CHARACTER;
            }  // fall though
            case 124: break;
            case DQ_STRING: {
              yybegin(YYINITIAL); return TokenType.BAD_CHARACTER;
            }  // fall though
            case 125: break;
            case SQ_STRING: {
              yybegin(YYINITIAL); return TokenType.BAD_CHARACTER;
            }  // fall though
            case 126: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 25: break;
          case 2: 
            { return RiaTypes.OPERATOR;
            } 
            // fall through
          case 26: break;
          case 3: 
            { return RiaTypes.IDENTIFIER;
            } 
            // fall through
          case 27: break;
          case 4: 
            { yybegin(SQ_STRING);
            } 
            // fall through
          case 28: break;
          case 5: 
            { return RiaTypes.SEPARATOR;
            } 
            // fall through
          case 29: break;
          case 6: 
            { return RiaTypes.NUMBER;
            } 
            // fall through
          case 30: break;
          case 7: 
            { yybegin(DQ_STRING);
            } 
            // fall through
          case 31: break;
          case 8: 
            { if(braceCount.size() > 0)
        braceCount.set(0, braceCount.get(0) + 1);
    return RiaTypes.BRACES_LEFT;
            } 
            // fall through
          case 32: break;
          case 9: 
            { if(braceCount.size() > 0) {
        braceCount.set(0, braceCount.get(0) - 1);
        if(braceCount.get(0) <= 0 && inString > 0) {
            braceCount.remove(0);
            inString--;
            yybegin(DQ_STRING);
        }
    }
    return RiaTypes.BRACES_RIGHT;
            } 
            // fall through
          case 33: break;
          case 10: 
            { return RiaTypes.BRACKET_LEFT;
            } 
            // fall through
          case 34: break;
          case 11: 
            { return RiaTypes.BRACKET_RIGHT;
            } 
            // fall through
          case 35: break;
          case 12: 
            { return RiaTypes.PAR_LEFT;
            } 
            // fall through
          case 36: break;
          case 13: 
            { return RiaTypes.PAR_RIGHT;
            } 
            // fall through
          case 37: break;
          case 14: 
            { 
            } 
            // fall through
          case 38: break;
          case 15: 
            { yypushback(yylength()); yybegin(YYINITIAL); return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 39: break;
          case 16: 
            { yybegin(YYINITIAL); return RiaTypes.STRING;
            } 
            // fall through
          case 40: break;
          case 17: 
            { return RiaTypes.COMMENT;
            } 
            // fall through
          case 41: break;
          case 18: 
            { yybegin(ML_COMMENT); docComment = false;
            } 
            // fall through
          case 42: break;
          case 19: 
            { return RiaTypes.KEYWORD;
            } 
            // fall through
          case 43: break;
          case 20: 
            { yybegin(YYINITIAL); return docComment ? RiaTypes.DOC_COMMENT : RiaTypes.COMMENT;
            } 
            // fall through
          case 44: break;
          case 21: 
            { inString++; braceCount.add(0, 0); yybegin(YYINITIAL); yypushback(2); return RiaTypes.STRING;
            } 
            // fall through
          case 45: break;
          case 22: 
            { return RiaTypes.DOC_COMMENT;
            } 
            // fall through
          case 46: break;
          case 23: 
            { yybegin(ML_COMMENT); docComment = true;
            } 
            // fall through
          case 47: break;
          case 24: 
            { return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 48: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
